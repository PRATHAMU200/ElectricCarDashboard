# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\advanceddashboardcar.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


#from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QDateTime
from PySide2 import QtCore, QtWidgets, QtGui, QtWebEngineWidgets
from PySide2extn.RoundProgressBar import roundProgressBar #IMPORT THE EXTENSION LIBRARY
from media import MusicPlayer

music_folder_path = "media"
music_player = MusicPlayer(music_folder_path)
playingnum = 0


#from PyQt5 import QtWebEngineWidgets


class Ui_MainWindow(object):
    playingnum = 0
    volume_level = 0.7
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1041, 474)
        MainWindow.setStyleSheet("background-color: rgb(26,26,27);\n"
"border: 0px")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainframe = QtWidgets.QFrame(self.centralwidget)
        self.mainframe.setGeometry(QtCore.QRect(10, 0, 1001, 451))
        self.mainframe.setStyleSheet("background-color: rgba(33,32,33,255);\n"
"color:white;")
        self.mainframe.setObjectName("mainframe")
        self.system = QtWidgets.QFrame(self.mainframe)
        self.system.setGeometry(QtCore.QRect(460, 370, 541, 61))
        self.system.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: 0px;\n"
"")
        self.system.setObjectName("system")
        self.gear = QtWidgets.QWidget(self.system)
        self.gear.setGeometry(QtCore.QRect(360, 0, 141, 60))
        self.gear.setObjectName("gear")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.gear)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pg = QtWidgets.QLabel(self.gear)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.pg.setFont(font)
        self.pg.setAlignment(QtCore.Qt.AlignCenter)
        self.pg.setObjectName("pg")
        self.horizontalLayout_3.addWidget(self.pg)
        self.rg = QtWidgets.QLabel(self.gear)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.rg.setFont(font)
        self.rg.setStyleSheet("color:grey;")
        self.rg.setAlignment(QtCore.Qt.AlignCenter)
        self.rg.setObjectName("rg")
        self.horizontalLayout_3.addWidget(self.rg)
        self.ng = QtWidgets.QLabel(self.gear)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.ng.setFont(font)
        self.ng.setStyleSheet("color:grey;")
        self.ng.setAlignment(QtCore.Qt.AlignCenter)
        self.ng.setObjectName("ng")
        self.horizontalLayout_3.addWidget(self.ng)
        self.dg = QtWidgets.QLabel(self.gear)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.dg.setFont(font)
        self.dg.setStyleSheet("color:grey;")
        self.dg.setAlignment(QtCore.Qt.AlignCenter)
        self.dg.setObjectName("dg")
        self.horizontalLayout_3.addWidget(self.dg)
        self.start = QtWidgets.QLabel(self.system)
        self.start.setGeometry(QtCore.QRect(290, 10, 81, 38))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.start.setFont(font)
        self.start.setStyleSheet("color:rgba(49,203,72,255);")
        self.start.setAlignment(QtCore.Qt.AlignCenter)
        self.start.setObjectName("start")
        self.dial = roundProgressBar(self.mainframe)
        self.dial.setGeometry(QtCore.QRect(90, 100, 221, 241))
        self.dial.rpb_setBarStyle('Line')
        self.dial.rpb_setLineCap('RoundCap')
        self.dial.rpb_setDirection('AntiClockwise')
        self.dial.rpb_setPathWidth(15)
        self.dial.rpb_setLineWidth(15)
        self.dial.setStyleSheet("color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"selection-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, stop:0 rgba(255, 255, 255, 255), stop:0.1 rgba(255, 255, 255, 255), stop:0.2 rgba(255, 176, 176, 167), stop:0.3 rgba(255, 151, 151, 92), stop:0.4 rgba(255, 125, 125, 51), stop:0.5 rgba(255, 76, 76, 205), stop:0.52 rgba(255, 76, 76, 205), stop:0.6 rgba(255, 180, 180, 84), stop:1 rgba(255, 255, 255, 0));")
        self.dial.setObjectName("dial")
        self.batterytext = QtWidgets.QLabel(self.mainframe)
        self.batterytext.setGeometry(QtCore.QRect(150, 224, 111, 31))
        self.batterytext.hide()
        font = QtGui.QFont()
        font.setPointSize(9)
        self.batterytext.setFont(font)
        self.batterytext.setStyleSheet("color:white;\n"
"background-color: rgba(0, 0, 0,0);")
        self.batterytext.setAlignment(QtCore.Qt.AlignCenter)
        self.batterytext.setObjectName("batterytext")
        self.batterypercentage = QtWidgets.QLabel(self.mainframe)
        self.batterypercentage.hide()
        self.batterypercentage.setGeometry(QtCore.QRect(160, 174, 91, 61))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(False)
        font.setWeight(50)
        self.batterypercentage.setFont(font)
        self.batterypercentage.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.batterypercentage.setStyleSheet("border: 0px;\n"
"background-color: rgba(0,0,0,0);")
        self.batterypercentage.setAlignment(QtCore.Qt.AlignCenter)
        self.batterypercentage.setObjectName("batterypercentage")
        self.title = QtWidgets.QWidget(self.mainframe)
        self.title.setGeometry(QtCore.QRect(240, 0, 551, 51))
        self.title.setStyleSheet("background-color: rgb(7, 2, 7);\n"
"border-bottom-left-radius: 50px;\n"
"border-bottom-right-radius: 50px;")
        self.title.setObjectName("title")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.title)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.homet = QtWidgets.QPushButton(self.title)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.homet.setFont(font)
        self.homet.setStyleSheet("\n"
"color: white;")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(".\\assets/home.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.homet.setIcon(icon)
        self.homet.setObjectName("homet")
        self.horizontalLayout_2.addWidget(self.homet)
        self.mediat = QtWidgets.QPushButton(self.title)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.mediat.setFont(font)
        self.mediat.setStyleSheet("\n"
"color: white;")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/note-vector-icon-sheet-music-260nw-1900552600.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.mediat.setIcon(icon1)
        self.mediat.setObjectName("mediat")
        self.horizontalLayout_2.addWidget(self.mediat)
        self.navigationt = QtWidgets.QPushButton(self.title)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.navigationt.setFont(font)
        self.navigationt.setStyleSheet("\n"
"color: white;")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/8b7261afc1179fd7b1212062f7deb4ea.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.navigationt.setIcon(icon2)
        self.navigationt.setObjectName("navigationt")
        self.horizontalLayout_2.addWidget(self.navigationt)
        self.callt = QtWidgets.QPushButton(self.title)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.callt.setFont(font)
        self.callt.setStyleSheet("\n"
"color: white;")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(".\\assets/download.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.callt.setIcon(icon3)
        self.callt.setObjectName("callt")
        self.horizontalLayout_2.addWidget(self.callt)
        self.interactwindow = QtWidgets.QStackedWidget(self.mainframe)
        self.interactwindow.setGeometry(QtCore.QRect(320, 60, 381, 371))
        self.interactwindow.setObjectName("interactwindow")
        self.navigation = QtWidgets.QWidget()
        self.navigation.setObjectName("navigation")
        #self.navigationwindow = QtWidgets.QLabel(self.navigation)
        self.navigationwindow = QtWebEngineWidgets.QWebEngineView(self.navigation)
        self.navigationwindow.setGeometry(QtCore.QRect(40, 10, 341, 361))
        #self.navigationwindow.setGeometry(QtCore.QRect(2, 7, 1001, 451))
        #self.navigationwindow.setText("")
        self.navigationwindow.setUrl(QtCore.QUrl("https://www.google.com/maps"))
        #self.navigationwindow.setPixmap(QtGui.QPixmap(".\\assets/google_maps_ios_screenshot.jpg"))
        #self.navigationwindow.setScaledContents(True)
        self.navigationwindow.setObjectName("navigationwindow")
#         self.tolabel = QtWidgets.QLabel(self.navigation)
#         self.tolabel.setGeometry(QtCore.QRect(180, 6, 81, 21))
#         font = QtGui.QFont()
#         font.setPointSize(10)
#         self.tolabel.setFont(font)
#         self.tolabel.setStyleSheet("color:grey;\n"
# "background-color: rgba(0, 0, 0,0);")
#         self.tolabel.setAlignment(QtCore.Qt.AlignCenter)
#         self.tolabel.setObjectName("tolabel")
#         self.fromlabel = QtWidgets.QLabel(self.navigation)
#         self.fromlabel.setGeometry(QtCore.QRect(20, 6, 81, 21))
#         font = QtGui.QFont()
#         font.setPointSize(10)
#         self.fromlabel.setFont(font)
#         self.fromlabel.setStyleSheet("color:grey;\n"
# "background-color: rgba(0, 0, 0,0);")
#         self.fromlabel.setAlignment(QtCore.Qt.AlignCenter)
#         self.fromlabel.setObjectName("fromlabel")
#         self.fromnav = QtWidgets.QLineEdit(self.navigation)
#         self.fromnav.setGeometry(QtCore.QRect(90, 11, 101, 16))
#         self.fromnav.setStyleSheet("color:white;\n"
# "border: 0.5px solid rgba(57,56,56,255);")
#         self.fromnav.setObjectName("fromnav")
#         self.tonav = QtWidgets.QLineEdit(self.navigation)
#         self.tonav.setGeometry(QtCore.QRect(250, 10, 111, 16))
#         self.tonav.setStyleSheet("color:white;\n"
# "border: 0.5px solid rgba(57,56,56,255);")
#         self.tonav.setObjectName("tonav")
        self.interactwindow.addWidget(self.navigation)
        self.call = QtWidgets.QWidget()
        self.call.setObjectName("call")
        self.interactwindow.addWidget(self.call)
        self.home = QtWidgets.QWidget()
        self.home.setObjectName("home")
        self.speed = QtWidgets.QLabel(self.home)
        self.speed.setGeometry(QtCore.QRect(90, 40, 201, 111))
        font = QtGui.QFont()
        font.setPointSize(48)
        font.setBold(True)
        font.setWeight(75)
        self.speed.setFont(font)
        self.speed.setStyleSheet("border: 0px;\n"
"background-color: rgba(0,0,0,0);\n"
"color: rgb(4,222,189);")
        self.speed.setAlignment(QtCore.Qt.AlignCenter)
        self.speed.setObjectName("speed")
        self.speedlabel = QtWidgets.QLabel(self.home)
        self.speedlabel.setGeometry(QtCore.QRect(131, 130, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.speedlabel.setFont(font)
        self.speedlabel.setStyleSheet("border: 0px;\n"
"background-color: rgba(0,0,0,0);\n"
"color: rgb(4,222,189);")
        self.speedlabel.setAlignment(QtCore.Qt.AlignCenter)
        self.speedlabel.setObjectName("speedlabel")
        self.carpic = QtWidgets.QLabel(self.home)
        self.carpic.setGeometry(QtCore.QRect(155, 222, 61, 121))
        self.carpic.setStyleSheet("border: 0px;\n"
"background-color: rgba(0,0,0,0);")
        self.carpic.setText("")
        self.carpic.setPixmap(QtGui.QPixmap(".\\assets/car.png"))
        self.carpic.setScaledContents(True)
        self.carpic.setObjectName("carpic")
        self.roadpic = QtWidgets.QLabel(self.home)
        self.roadpic.setGeometry(QtCore.QRect(90, 170, 191, 211))
        self.roadpic.setStyleSheet("border: 0px;\n"
"background-color: rgba(0,0,0,0);")
        self.roadpic.setText("")
        self.roadpic.setPixmap(QtGui.QPixmap(".\\assets/roadback.png"))
        self.roadpic.setScaledContents(True)
        self.roadpic.setObjectName("roadpic")
        self.leftturnoff = QtWidgets.QLabel(self.home)
        self.leftturnoff.setGeometry(QtCore.QRect(30, 70, 81, 61))
        self.leftturnoff.setStyleSheet("border: 0px;\n"
"background-color: rgba(0,0,0,0);")
        self.leftturnoff.setText("")
        self.leftturnoff.setPixmap(QtGui.QPixmap(".\\assets/leftturn.png"))
        self.leftturnoff.setScaledContents(True)
        self.leftturnoff.setObjectName("leftturnoff")
        self.rightturnoff = QtWidgets.QLabel(self.home)
        self.rightturnoff.setGeometry(QtCore.QRect(271, 70, 81, 61))
        self.rightturnoff.setStyleSheet("border: 0px;\n"
"background-color: rgba(0,0,0,0);")
        self.rightturnoff.setText("")
        self.rightturnoff.setPixmap(QtGui.QPixmap(".\\assets/rightturn.png"))
        self.rightturnoff.setScaledContents(True)
        self.rightturnoff.setObjectName("rightturnoff")
        self.leftturnon = QtWidgets.QLabel(self.home)
        self.leftturnon.setGeometry(QtCore.QRect(30, 70, 81, 61))
        self.leftturnon.setStyleSheet("border: 0px;\n"
"background-color: rgba(0,0,0,0);")
        self.leftturnon.setText("")
        self.leftturnon.setPixmap(QtGui.QPixmap(".\\assets/leftturnon.png"))
        self.leftturnon.setScaledContents(True)
        self.leftturnon.setObjectName("leftturnon")
        self.leftturnon.hide()
        self.rightturnon = QtWidgets.QLabel(self.home)
        self.rightturnon.setGeometry(QtCore.QRect(270, 70, 81, 61))
        self.rightturnon.setStyleSheet("border: 0px;\n"
"background-color: rgba(0,0,0,0);")
        self.rightturnon.setText("")
        self.rightturnon.setPixmap(QtGui.QPixmap(".\\assets/rightturnon.png"))
        self.rightturnon.setScaledContents(True)
        self.rightturnon.setObjectName("rightturnon")
        self.rightturnoff.raise_()
        self.rightturnon.raise_()
        self.rightturnon.hide()
        self.roadpic.raise_()
        self.speed.raise_()
        self.speedlabel.raise_()
        self.carpic.raise_()
        self.leftturnoff.raise_()
        self.leftturnon.raise_()
        self.interactwindow.addWidget(self.home)
        self.music = QtWidgets.QWidget()
        self.music.setObjectName("music")
        self.image = QtWidgets.QLabel(self.music)
        self.image.setGeometry(QtCore.QRect(120, 100, 141, 131))
        self.image.setText("")
        self.image.setPixmap(QtGui.QPixmap(".\\assets/note-vector-icon-sheet-music-260nw-1900552600.jpg"))
        self.image.setScaledContents(True)
        self.image.setObjectName("image")
        self.controls = QtWidgets.QFrame(self.music)
        self.controls.setGeometry(QtCore.QRect(120, 250, 141, 51))
        self.controls.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.controls.setFrameShadow(QtWidgets.QFrame.Raised)
        self.controls.setObjectName("controls")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.controls)
        self.horizontalLayout.setSpacing(17)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.backward = QtWidgets.QPushButton(self.controls)
        self.backward.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(".\\assets/forward - Copy.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.backward.setIcon(icon4)
        self.backward.setIconSize(QtCore.QSize(40, 40))
        self.backward.setObjectName("backward")
        self.horizontalLayout.addWidget(self.backward)
        self.play = QtWidgets.QPushButton(self.controls)
        self.play.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(".\\assets/pause.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.play.setIcon(icon5)
        self.play.setIconSize(QtCore.QSize(30, 30))
        self.play.setObjectName("play")
        self.horizontalLayout.addWidget(self.play)
        self.forward = QtWidgets.QPushButton(self.controls)
        self.forward.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(".\\assets/forward.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.forward.setIcon(icon6)
        self.forward.setIconSize(QtCore.QSize(40, 40))
        self.forward.setObjectName("forward")
        self.horizontalLayout.addWidget(self.forward)
        self.description = QtWidgets.QLabel(self.music)
        self.description.setGeometry(QtCore.QRect(140, 60, 91, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.description.setFont(font)
        self.description.setAlignment(QtCore.Qt.AlignCenter)
        self.description.setObjectName("description")
        self.filetitle = QtWidgets.QLabel(self.music)
        self.filetitle.setGeometry(QtCore.QRect(80, 30, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.filetitle.setFont(font)
        self.filetitle.setStyleSheet("color:white;")
        self.filetitle.setAlignment(QtCore.Qt.AlignCenter)
        self.filetitle.setObjectName("filetitle")
        self.mute = QtWidgets.QPushButton(self.music)
        self.mute.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(".\\assets/sound.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.mute.setIcon(icon4)
        self.mute.setIconSize(QtCore.QSize(30, 30))
        self.mute.setObjectName("mute")
        self.mute.setGeometry(QtCore.QRect(116, 306, 40, 40))
        self.volume = QtWidgets.QSlider(self.music)
        self.volume.setGeometry(QtCore.QRect(150, 315, 100, 22))
        self.volume.setOrientation(QtCore.Qt.Horizontal)
        self.volume.setObjectName("volume")
        self.volume.setMinimum(0)
        self.volume.setMaximum(100)
        self.volume.setValue(70)
        self.volume.valueChanged.connect(self.update_volume)
        self.volume.setToolTip('Volume')
        self.update_volume(70)

        volumeBarstyle = """
            QSlider::groove:horizontal {
                background: #2E2E2E; /* Dark background color */
                height: 8px; /* Height of the groove */
                border-radius: 4px; /* Round edges */
            }

            QSlider::handle:horizontal {
                background: #3498DB; /* Custom color for the handle */
                border: 1px solid #2980B9; /* Border color for the handle */
                width: 14px; /* Width of the handle */
                margin: -4px 0; /* Position of the handle */
                border-radius: 7px; /* Round edges */
            }
        """
        self.volume.setStyleSheet(volumeBarstyle)
        self.interactwindow.addWidget(self.music)
        #self.datetime = QtWidgets.QLabel(self.mainframe)
        self.datetime = QtWidgets.QLabel(self.mainframe)
        self.datetime.setGeometry(QtCore.QRect(90, 386, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.datetime.setFont(font)
        self.datetime.setStyleSheet("color: white;")
        self.datetime.setAlignment(QtCore.Qt.AlignCenter)
        self.datetime.setObjectName("datetime")
        self.cardata = QtWidgets.QWidget(self.mainframe)
        self.cardata.setGeometry(QtCore.QRect(730, 90, 221, 301))
        self.cardata.setStyleSheet("")
        self.cardata.setObjectName("cardata")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.cardata)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.distancedata = QtWidgets.QWidget(self.cardata)
        self.distancedata.setObjectName("distancedata")
        self.dpic = QtWidgets.QLabel(self.distancedata)
        self.dpic.setGeometry(QtCore.QRect(10, 10, 61, 51))
        self.dpic.setText("")
        self.dpic.setPixmap(QtGui.QPixmap(".\\assets/road.png"))
        self.dpic.setScaledContents(True)
        self.dpic.setObjectName("dpic")
        self.distance = QtWidgets.QLabel(self.distancedata)
        self.distance.setGeometry(QtCore.QRect(80, 0, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.distance.setFont(font)
        self.distance.setStyleSheet("color:white;\n"
"background-color: rgba(0, 0, 0,0);")
        self.distance.setAlignment(QtCore.Qt.AlignCenter)
        self.distance.setObjectName("distance")
        self.dlabel = QtWidgets.QLabel(self.distancedata)
        self.dlabel.setGeometry(QtCore.QRect(80, 30, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.dlabel.setFont(font)
        self.dlabel.setStyleSheet("color:grey;\n"
"background-color: rgba(0, 0, 0,0);")
        self.dlabel.setAlignment(QtCore.Qt.AlignCenter)
        self.dlabel.setObjectName("dlabel")
        self.verticalLayout.addWidget(self.distancedata)
        self.fueldata = QtWidgets.QWidget(self.cardata)
        self.fueldata.setObjectName("fueldata")
        self.fuel = QtWidgets.QLabel(self.fueldata)
        self.fuel.setGeometry(QtCore.QRect(80, 0, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.fuel.setFont(font)
        self.fuel.setStyleSheet("color:white;\n"
"background-color: rgba(0, 0, 0,0);")
        self.fuel.setAlignment(QtCore.Qt.AlignCenter)
        self.fuel.setObjectName("fuel")
        self.fpic = QtWidgets.QLabel(self.fueldata)
        self.fpic.setGeometry(QtCore.QRect(10, 0, 61, 61))
        self.fpic.setText("")
        self.fpic.setPixmap(QtGui.QPixmap(".\\assets/electric-station.png"))
        self.fpic.setScaledContents(True)
        self.fpic.setObjectName("fpic")
        self.flabel = QtWidgets.QLabel(self.fueldata)
        self.flabel.setGeometry(QtCore.QRect(70, 30, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.flabel.setFont(font)
        self.flabel.setStyleSheet("color:grey;\n"
"background-color: rgba(0, 0, 0,0);")
        self.flabel.setAlignment(QtCore.Qt.AlignCenter)
        self.flabel.setObjectName("flabel")
        self.verticalLayout.addWidget(self.fueldata)
        self.avgspeeddata = QtWidgets.QWidget(self.cardata)
        self.avgspeeddata.setObjectName("avgspeeddata")
        self.aspic = QtWidgets.QLabel(self.avgspeeddata)
        self.aspic.setGeometry(QtCore.QRect(3, 0, 61, 51))
        self.aspic.setText("")
        self.aspic.setPixmap(QtGui.QPixmap(".\\assets/battery.png"))
        self.aspic.setScaledContents(True)
        self.aspic.setObjectName("aspic")
        self.avgspeed = QtWidgets.QLabel(self.avgspeeddata)
        self.avgspeed.setGeometry(QtCore.QRect(90, 0, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.avgspeed.setFont(font)
        self.avgspeed.setStyleSheet("color:white;\n"
"background-color: rgba(0, 0, 0,0);")
        self.avgspeed.setAlignment(QtCore.Qt.AlignCenter)
        self.avgspeed.setObjectName("avgspeed")
        self.aslabel = QtWidgets.QLabel(self.avgspeeddata)
        self.aslabel.setGeometry(QtCore.QRect(90, 30, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.aslabel.setFont(font)
        self.aslabel.setStyleSheet("color:grey;\n"
"background-color: rgba(0, 0, 0,0);")
        self.aslabel.setAlignment(QtCore.Qt.AlignCenter)
        self.aslabel.setObjectName("aslabel")
        self.verticalLayout.addWidget(self.avgspeeddata)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"color: white;")
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.interactwindow.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.homet.clicked.connect(self.show_home_page)
        self.mediat.clicked.connect(self.show_media_page)
        self.navigationt.clicked.connect(self.show_navigation_page)
        #self.callt.connect(self.show_call_page)

        # # Create a QTimer to update the time every second
        # self.timer = QTimer(self)
        # self.timer.timeout.connect(self.updateDateTime)
        # self.timer.start(1000)  # Update every 1000 milliseconds (1 second)
        

        self.rightturnon.mouseReleaseEvent = self.f_rightturnoff
        self.rightturnoff.mouseReleaseEvent = self.f_rightturnon
        self.leftturnon.mouseReleaseEvent = self.f_leftturnoff
        self.leftturnoff.mouseReleaseEvent = self.f_leftturnon
        self.start.mouseReleaseEvent = self.f_start
        self.rg.mouseReleaseEvent = self.f_rg
        self.pg.mouseReleaseEvent = self.f_pg
        self.ng.mouseReleaseEvent = self.f_ng
        self.dg.mouseReleaseEvent = self.f_dg

        #media page
        self.play.clicked.connect(self.f_play)
        self.forward.clicked.connect(self.f_forward)
        self.backward.clicked.connect(self.f_backward)
        self.mute.clicked.connect(self.f_mute)

    def show_media_page(self):
        self.interactwindow.setCurrentIndex(3)

    def show_navigation_page(self):
        self.interactwindow.setCurrentIndex(0)

    def show_home_page(self):
        self.interactwindow.setCurrentIndex(2)

    def show_call_page(self):
        self.interactwindow.setCurrentIndex(1)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pg.setText(_translate("MainWindow", "P"))
        self.rg.setText(_translate("MainWindow", "R"))
        self.ng.setText(_translate("MainWindow", "N"))
        self.dg.setText(_translate("MainWindow", "D"))
        self.start.setText(_translate("MainWindow", "Ready"))
        self.batterytext.setText(_translate("MainWindow", "Battery Charge"))
        self.batterypercentage.setText(_translate("MainWindow", "68%"))
        self.homet.setText(_translate("MainWindow", "Home"))
        self.mediat.setText(_translate("MainWindow", "Media"))
        self.navigationt.setText(_translate("MainWindow", "Navigation"))
        self.callt.setText(_translate("MainWindow", "Call"))
        # self.tolabel.setText(_translate("MainWindow", "To:"))
        # self.fromlabel.setText(_translate("MainWindow", "From:"))
        self.speed.setText(_translate("MainWindow", "68"))
        self.speedlabel.setText(_translate("MainWindow", "MPH"))
        self.description.setText(_translate("MainWindow", "Description"))
        self.filetitle.setText(_translate("MainWindow", "Music"))
        self.datetime.setText(_translate("MainWindow", "03/02/2024  12:00PM"))
        self.distance.setText(_translate("MainWindow", "188 km"))
        self.dlabel.setText(_translate("MainWindow", "Distance"))
        self.fuel.setText(_translate("MainWindow", "34 mpg"))
        self.flabel.setText(_translate("MainWindow", "Avg Fuel Usage"))
        self.avgspeed.setText(_translate("MainWindow", "78 mph"))
        self.aslabel.setText(_translate("MainWindow", "Avg Speed"))
        self.updateDateTime()
        self.initTimer()

    def f_rightturnoff(self,x):
        print("Right turn off..")
        self.rightturnon.hide()
    def f_rightturnon(self,x):
        print("Right turn on..")
        self.rightturnon.show()
    def f_leftturnoff(self,x):
        print("Left turn off..")
        self.leftturnon.hide()
    def f_leftturnon(self,x):
        print("Left turn on..")
        self.leftturnon.show()
    def f_battery(self,battery):
        print("Battery value changing..")
        self.dial.rpb_setValue(battery)
    def f_speed(self,speed):
        _translate = QtCore.QCoreApplication.translate
        print("Speed value changing..")
        self.speed.setText(_translate("MainWindow", str(speed)))
    def f_distance(self,value):
        _translate = QtCore.QCoreApplication.translate
        print("Distance value changing..")
        self.distance.setText(_translate("MainWindow", str(value)+" km"))
    def f_avgspeed(self,value):
        _translate = QtCore.QCoreApplication.translate
        print("Avgspeed value changing..")
        self.avgspeed.setText(_translate("MainWindow", str(value)+" mph"))
    def f_fuel(self,value):
        _translate = QtCore.QCoreApplication.translate
        print("Fuel value changing..")
        self.fuel.setText(_translate("MainWindow", str(value)+" mpg"))
    def initTimer(self):
        self.timer = QTimer()
        self.timer.timeout.connect(self.updateDateTime)
        self.timer.start(1000)
    def updateDateTime(self):
        # Get the current date and time
        current_datetime = QDateTime.currentDateTime()

        # Display the formatted date and time in the label
        #formatted_datetime = current_datetime.toString('yyyy-MM-dd hh:mm:ss')
        formatted_datetime = current_datetime.toString()
        self.datetime.setText(formatted_datetime)
        #self.datetime.setText(_translate("MainWindow", "03/02/2024  12:00PM"))
    def f_start(self,v):
        print("Power button..")
        value = self.start.text()
        if("ready" in value.lower()):
            self.start.setText("Start")
            self.start.setStyleSheet("color:rgba(49,203,72,100);")
        else:
            self.start.setText("Ready")
            self.start.setStyleSheet("color:rgba(49,203,72,255);")
    def f_pg(self,v):
        gearvalue = "P"
        self.pg.setStyleSheet("color:white;")
        self.rg.setStyleSheet("color:grey;")
        self.ng.setStyleSheet("color:grey;")
        self.dg.setStyleSheet("color:grey;")
    def f_rg(self,v):
        gearvalue = "R"
        self.pg.setStyleSheet("color:grey;")
        self.rg.setStyleSheet("color:white;")
        self.ng.setStyleSheet("color:grey;")
        self.dg.setStyleSheet("color:grey;")
    def f_ng(self,v):
        gearvalue = "N"
        self.pg.setStyleSheet("color:grey;")
        self.rg.setStyleSheet("color:grey;")
        self.ng.setStyleSheet("color:white;")
        self.dg.setStyleSheet("color:grey;")
    def f_dg(self,v):
        gearvalue = "D"
        self.pg.setStyleSheet("color:grey;")
        self.rg.setStyleSheet("color:grey;")
        self.ng.setStyleSheet("color:grey;")
        self.dg.setStyleSheet("color:white;")

    def f_play(self):
        global Ui_MainWindow
        self.update_media_name()
        self.update_media_photo()
        if(Ui_MainWindow.playingnum==0):
            music_player.play()
            Ui_MainWindow.playingnum = 1
            icon5 = QtGui.QIcon()
            icon5.addPixmap(QtGui.QPixmap(".\\assets/play1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.play.setIcon(icon5)
        elif(Ui_MainWindow.playingnum==1):
            music_player.pause()
            Ui_MainWindow.playingnum = 2
            icon5 = QtGui.QIcon()
            icon5.addPixmap(QtGui.QPixmap(".\\assets/pause.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.play.setIcon(icon5)
        else:
            music_player.pause()
            Ui_MainWindow.playingnum = 1
            icon5 = QtGui.QIcon()
            icon5.addPixmap(QtGui.QPixmap(".\\assets/play1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.play.setIcon(icon5)
    def f_forward(self):
        music_player.next_track()
        self.update_media_name()
        self.update_media_photo()
    def f_backward(self):
        music_player.prev_track()
        self.update_media_name()
        self.update_media_photo()
    def f_mute(self):
        global Ui_MainWindow
        if(Ui_MainWindow.volume_level>0):
                Ui_MainWindow.volume_level = 0
                music_player.set_volume(0)
                icon4 = QtGui.QIcon()
                icon4.addPixmap(QtGui.QPixmap(".\\assets/mute.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.mute.setIcon(icon4)
        else:
            self.update_volume(50)
    def update_volume(self, value):
        global Ui_MainWindow
        # Calculate the volume level based on the QSlider value
        previousvolume = Ui_MainWindow.volume_level
        Ui_MainWindow.volume_level = value / 100.0
        if(Ui_MainWindow.volume_level>0 or previousvolume<=0):
                music_player.set_volume(Ui_MainWindow.volume_level)
                icon4 = QtGui.QIcon()
                icon4.addPixmap(QtGui.QPixmap(".\\assets/sound.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.mute.setIcon(icon4)
        elif(Ui_MainWindow.volume_level<=0):
            music_player.set_volume(Ui_MainWindow.volume_level)
            icon4 = QtGui.QIcon()
            icon4.addPixmap(QtGui.QPixmap(".\\assets/mute.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.mute.setIcon(icon4)
        else:
            music_player.set_volume(Ui_MainWindow.volume_level)
    def update_media_name(self):
        title = music_player.get_current_track_name()
        self.description.setText(title[19:])
        self.filetitle.setText(title[:19])
    def update_media_photo(self):
        album_artwork = music_player.get_album_artwork()
        if album_artwork:
            pixmap = QtGui.QPixmap()
            pixmap.loadFromData(album_artwork)
            self.image.setPixmap(pixmap)








#import icon_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    #functions
    ui.f_battery(75)
    ui.f_speed(180)
    ui.f_avgspeed(182)
    sys.exit(app.exec_())
